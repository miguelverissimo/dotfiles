#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).


remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000
WIPS=()

while read local_ref local_sha remote_ref remote_sha
do
  if [ "$local_sha" = $z40 ]
  then
    # Handle delete
    :
  else
    if [ "$remote_ref" != "refs/heads/develop" ]
    then
      exit 0
    fi

    if [ "$remote_sha" = $z40 ]
    then
      # New branch, examine all commits
      range="$local_sha"
    else
      # Update to existing branch, examine new commits
      range="$remote_sha..$local_sha"
    fi

    # Check for WIP commit
    commit=`git rev-list -i --grep 'WIP' "$range"`
  fi
done

exec < /dev/tty
for i in ${commit[@]}; do
  echo -e "Found WIP commit:\n"
  echo `git show -s --format="%h %C(yellow)%ci%Creset %Cgreen%an%Creset | %s" $i`
  echo -e "\nDo you want to continue with push? [y,n]"
  read -n1 response
  if [[ $response == "y" ]]; then
    echo -e "\n\nContinue commit\n"
  else
    echo -e "\n\nAborting commit\n"
    exit 1
  fi
done

exit 0
